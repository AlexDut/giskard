# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1
# https://circleci.com/docs/reusing-config/#example-of-using-an-executor-declared-in-configyml-with-matrix-jobs
executors:
  # here we can define an executor that will be shared across different jobs
  ubuntu:
    parameters:
      python-version:
        description: "Python version"
        type: string
    docker:
      - image: cimg/python:<<parameters.python-version>>
    environment:
      GSK_DISABLE_ANALYTICS: "True"
      GISKARD_DEV_MODE: "True"
    resource_class: medium
  # https://circleci.com/developer/machine/image/windows-server-2022-gui
  windows:
    parameters:
      python-version:
        description: "Python version"
        type: string
    machine:
      image: "windows-server-2022-gui:current"
      resource_class: windows.medium
      shell: bash.exe
    environment:
      GSK_DISABLE_ANALYTICS: "True"
      GISKARD_DEV_MODE: "True"
      # PATH: 'C:\Users\circleci\AppData\Roaming\Python\Scripts\'
  macos:
    parameters:
      python-version:
        description: "Python version"
        type: string
    macos:
      xcode: 14.2.0
      resource_class: macos.x86.medium.gen2
    environment:
      GSK_DISABLE_ANALYTICS: "True"
      GISKARD_DEV_MODE: "True"
      # PATH: "/Users/distiller/.local/bin:$PATH"
# Define a job to be invoked later in a workflow.
commands:
  pytest-parallel:
    description: Command to make the workflow cancelled as soons as possible
    parameters:
      markers:
        type: string
        default: ""
      os:
        type: string
      nb_workers:
        type: integer
        default: 1
    steps:
      - when:
          condition:
            equal: ["macos", <<parameters.os>>]
          steps:
            - run:
                name: Pytest -m <<parameters.markers>> (<<parameters.os>>)
                no_output_timeout: "20m"
                command: |
                  mkdir -p test-results
                  TEST=$(pdm run pytest --collect-only -m '<<parameters.markers>>' tests/ --quiet --no-header --no-summary |  tail -r | tail -n +3 | tail -r | circleci tests split --split-by=timings)
                  ./.venv/bin/pytest -c pyproject.toml --cov=giskard --cov-report=xml --cov-append --disable-warnings --no-header -vv --durations=0 --junitxml=test-results/junit.xml $TEST
      - when:
          condition:
            equal: ["windows", <<parameters.os>>]
          steps:
            - run:
                name: Pytest -m <<parameters.markers>> (<<parameters.os>>)
                no_output_timeout: "20m"
                command: |
                  mkdir -p test-results
                  TEST=$(pdm run pytest --collect-only -m '<<parameters.markers>>' tests/ --quiet --no-header --no-summary |  head -n -2 | circleci tests split --split-by=timings)
                  ./.venv/Scripts/pytest.exe -c pyproject.toml --cov=giskard --cov-report=xml --cov-append --disable-warnings --no-header -vv --durations=0 --junitxml=test-results/junit.xml $TEST
      - when:
          condition:
            equal: ["ubuntu", <<parameters.os>>]
          steps:
            - run:
                name: Pytest -m <<parameters.markers>> (<<parameters.os>>)
                no_output_timeout: "20m"
                command: |
                  mkdir -p test-results
                  TEST=$(pdm run pytest --collect-only -m '<<parameters.markers>>' tests/ --quiet --no-header --no-summary |  head -n -2 | circleci tests split --split-by=timings)
                  ./.venv/bin/pytest -c pyproject.toml --cov=giskard --cov-report=xml --cov-append --disable-warnings --no-header -vv --durations=0 --junitxml=test-results/junit.xml $TEST
      - store_test_results:
          path: test-results
  cancel_on_fail:
    description: Command to make the workflow cancelled as soons as possible
    steps:
      - run:
          name: Fail Fast
          when: on_fail
          command: |
            echo "Canceling workflow as a step resulted in failure"
            curl -X POST --header "Content-Type: application/json" "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel?circle-token=${CIRCLE_TOKEN}"
  install-pdm:
    description: "Install PDM"
    parameters:
      os:
        type: string
    steps:
      - unless:
          condition:
            equal: ["windows", <<parameters.os>>]
          steps:
            - run: curl -sSL https://pdm-project.org/install-pdm.py | python -
      - when:
          condition:
            equal: ["windows", <<parameters.os>>]
          steps:
            - run:
                name: Install PDM (powershell)
                command: (Invoke-WebRequest -Uri https://pdm-project.org/install-pdm.py -UseBasicParsing).Content | python -
                shell: powershell.exe
      - when:
          condition:
            equal: ["windows", <<parameters.os>>]
          steps:
            - run: echo 'export PATH="c:\users\circleci\appdata\roaming\python\scripts:$PATH"' >> "$BASH_ENV"
      - when:
          condition:
            equal: ["macos", <<parameters.os>>]
          steps:
            - run: echo 'export PATH=/Users/distiller/.local/bin:"$PATH"' >> "$BASH_ENV"
  install-python:
    description: "Install PDM"
    parameters:
      os:
        type: string
      python-version:
        type: string
    steps:
      - when:
          condition:
            equal: ["windows", <<parameters.os>>]
          steps:
            - run: choco install python --version=<<parameters.python-version>> --allow-downgrade -y
      - when:
          condition:
            equal: ["macos", <<parameters.os>>]
          steps:
            - run: brew install python@<<parameters.python-version>>
      - when:
          condition:
            equal: ["macos", <<parameters.os>>]
          steps:
            - run: brew install libomp
      - install-pdm:
          os: <<parameters.os >>
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  install:
    parameters:
      python-version:
        type: string
      os:
        type: string
    executor:
      name: <<parameters.os>>
      python-version: <<parameters.python-version>>
    steps:
      - checkout
      - install-python:
          os: <<parameters.os>>
          python-version: <<parameters.python-version>>
      # Download and cache dependencies
      - restore_cache:
          keys:
            - python-{{ .Environment.CACHE_VERSION }}-<<parameters.os>>-<<parameters.python-version>>-{{ checksum "pdm.lock" }}
      - run:
          name: Install deps
          command: |
            if [ ! -d ".venv" ]; then
              pdm install -G :all
            fi
      - save_cache:
          paths:
            - .venv
          key: python-{{ .Environment.CACHE_VERSION }}-<<parameters.os>>-<<parameters.python-version>>-{{ checksum "pdm.lock" }}
      # - cancel_on_fail
  unit-tests:
    parameters:
      python-version:
        type: string
      os:
        type: string
      parallelism:
        type: integer
      nb_workers:
        type: integer
        default: 1
      slow-tests:
        type: boolean
    executor:
      name: <<parameters.os>>
      python-version: <<parameters.python-version>>
    parallelism: <<parameters.parallelism>>
    steps:
      - checkout
      - install-python:
          os: <<parameters.os>>
          python-version: <<parameters.python-version>>
      # Download and cache dependencies
      - restore_cache:
          keys:
            - python-{{ .Environment.CACHE_VERSION }}-<<parameters.os>>-<<parameters.python-version>>-{{ checksum "pdm.lock" }}
      - pytest-parallel:
          markers: "not slow and memory_expensive"
          os: <<parameters.os>>
      - pytest-parallel:
          markers: "not slow and not memory_expensive"
          os: <<parameters.os>>
          nb_workers: <<parameters.nb_workers>>
      - when:
          condition: <<parameters.slow-tests>>
          steps:
            - pytest-parallel:
                markers: "slow"
                os: <<parameters.os>>
                nb_workers: <<parameters.nb_workers>>

      # - cancel_on_fail

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  python-workflow:
    jobs:
      - install:
          name: install-<<matrix.os>>-<<matrix.python-version>>
          os: ubuntu
          matrix:
            parameters:
              python-version: ["3.9", "3.10", "3.11"]
      - install:
          name: install-macos
          os: macos
          python-version: "3.10"
      - install:
          name: install-windows
          os: windows
          python-version: "3.10.11"
      - unit-tests:
          name: test-<<matrix.os>>-<<matrix.python-version>>
          slow-tests: False
          os: ubuntu
          parallelism: 4
          matrix:
            parameters:
              python-version: ["3.9", "3.10", "3.11"]
          requires:
            - install-<<matrix.os>>-<<matrix.python-version>>
      - unit-tests:
          name: unit-tests-mac
          os: macos
          python-version: "3.10"
          parallelism: 1
          nb_workers: 4
          slow-tests: False
          requires:
            - install-macos
      - unit-tests:
          name: unit-tests-windows
          os: windows
          parallelism: 4
          python-version: "3.10.11"
          slow-tests: False
          requires:
            - install-windows
  python-nightly:
    jobs:
      - install:
          name: install-<<os>>-<<matrix.python-version>>
          os: ubuntu
          matrix:
            parameters:
              python-version: ["3.9", "3.10", "3.11"]
      - install:
          name: install-macos
          os: macos
          python-version: "3.10"
      - install:
          name: install-windows
          os: windows
          python-version: "3.10.11"
      - unit-tests:
          name: test-<<os>>-<<matrix.python-version>>
          slow-tests: True
          os: ubuntu
          parallelism: 4
          matrix:
            parameters:
              python-version: ["3.9", "3.10", "3.11"]
          requires:
            - install-<<os>>-<<matrix.python-version>>
      - unit-tests:
          name: unit-tests-mac
          os: macos
          python-version: "3.10"
          parallelism: 1
          nb_workers: 4
          slow-tests: True
          requires:
            - install-macos
      - unit-tests:
          name: unit-tests-windows
          os: windows
          parallelism: 4
          python-version: "3.10.11"
          slow-tests: True
          requires:
            - install-windows
# https://circleci.com/docs/using-matrix-jobs/
# https://circleci.com/docs/configuration-reference/#dependencies-and-matrix-jobs
# https://support.circleci.com/hc/en-us/articles/360052058811-Exit-Build-Early-if-Any-Test-Fails
