# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

executors:
  # here we can define an executor that will be shared across different jobs
  python-executor:
    docker:
      - image: cimg/python:3.10
        environment:
          GSK_DISABLE_ANALYTICS: "True"
          GISKARD_DEV_MODE: "True"
    # working_directory: /root/engine
    resource_class: medium

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  install:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Install PDM
          command: curl -sSL https://pdm-project.org/install-pdm.py | python3 -
      # Download and cache dependencies
      - restore_cache:
          keys:
            - python-3.10-{{ checksum "pdm.lock" }}
            - python-3.10-
      - run:
          name: Install deps
          command: pdm install -G :all
      - save_cache:
          paths:
            - ~/engine/.cache/poetry
          key: v1-dependencies-{{ checksum "poetry.lock" }}
  unit-tests:
    executor: python-executor
    parallelism: 4
    steps:
      - checkout
      - run:
          name: Install PDM
          command: curl -sSL https://pdm-project.org/install-pdm.py | python3 -
      # Download and cache dependencies
      - restore_cache:
          keys:
            - python-3.10-{{ checksum "pdm.lock" }}
      - run:
          name: Run tests
          command: |
            TEST=$(circleci tests glob "tests/*.py" | circleci tests split --split-by=timings)
            command: pdm base-test -m 'not slow' $TEST

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  python-workflow:
    jobs:
      - install
      - unit-tests:
          requires:
            - install
