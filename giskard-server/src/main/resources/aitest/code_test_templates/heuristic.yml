title: Heuristic
id: heuristic
order: 2
items:
  - id: right_label
    title: Right Label
    hint: Test if the model returns the right classification label for a slice
    modelTypes:
      - MULTICLASS_CLASSIFICATION
      - BINARY_CLASSIFICATION
    # language=Python
    code: |-
      """
      Summary: Test if the model returns the right classification label for a slice

      Description: The test is passed when the percentage of rows returning the right
      classification label is higher than the threshold in a given slice

      Example: For a credit scoring model, the test is passed when more than 50%
      of people with high-salaries are classified as “non default”

      Args:
           actual_slice(GiskardDataset):
              slice of the  actual dataset
          model(ModelInspector):
              model used to compute the test
          classification_label(str):
              classification label you want to test
          threshold(float):
              threshold for the percentage of passed rows

      Returns:
          slice_nb_rows:
              length of slice_df tested
          metrics:
              the ratio of rows with the right classification label over the total of rows in the slice
          passed:
              TRUE if passed_ratio > threshold
      """
      tests.heuristic.test_right_label(
        actual_slice=actual_ds.slice(lambda df: df.head(len(df)//2)),
        model=model,
        classification_label='{{CLASSIFICATION LABEL}}',
        threshold=0.5
      )

  - id: output_in_range_clf
    title: Classification Probability in Range
    hint: Test if the model classification probability belongs to the right range for a slice
    modelTypes:
      - MULTICLASS_CLASSIFICATION
      - BINARY_CLASSIFICATION
    # language=Python
    code: |-
      """
      Summary: Test if the model classification probability belongs to the right range for a slice

      Description: The test is passed when the ratio of rows in the right range inside the
      slice is higher than the threshold.

      Example: For a credit scoring model, the test is passed when more than 50% of
      people with high wage have a probability of defaulting between 0 and 0.1

      Args:
           actual_slice(GiskardDataset):
              slice of the actual dataset
          model(ModelInspector):
              model used to compute the test
          classification_label:
              classification label you want to test
          min_range(float):
              minimum probability of occurrence of classification label
          max_range(float):
              maximum probability of occurrence of classification label
          threshold(float):
              threshold for the percentage of passed rows

      Returns:
          slice_nb_rows:
              length of slice_df tested
          metrics:
              the proportion of rows in the right range inside the slice
          passed:
              TRUE if metric > threshold
      """
      tests.heuristic.test_output_in_range(
        actual_slice=actual_ds.slice(lambda df: df.head(len(df)//2)),
        model=model,
        classification_label='{{CLASSIFICATION LABEL}}',
        min_range=0.3,
        max_range=0.7,
        threshold=0.5,
      )

  - id: output_in_range_reg
    title: Regression Output in Range
    hint: Test if the predicted output belongs to the right range for a slice
    modelTypes:
      - REGRESSION
    # language=Python
    code: |-
      """
      Summary: Test if the predicted output belongs to the right range for a slice

      Description: The test is passed when the ratio of rows in the right range inside the
      slice is higher than the threshold.

      Example : The predicted Sale Price of a studio in the city falls in a range between 300000 and 350000

      Args:
           actual_slice(GiskardDataset):
              slice of the actual dataset
          model(ModelInspector):
              model used to compute the test
          min_range(float):
              minimum value of prediction
          max_range(float):
              maximum value of prediction
          threshold(float):
              threshold for the percentage of passed rows

      Returns:
          slice_nb_rows:
              length of slice_df tested
          metrics:
              the proportion of rows in the right range inside the slice
          passed:
              TRUE if metric > threshold
      """
      tests.heuristic.test_output_in_range(
        actual_slice=actual_ds.slice(lambda df: df.head(len(df)//2)),
        model=model,
        min_range=100,
        max_range=1000,
        threshold=0.5,
      )
